<?php
/**
 * ArrayOfSymbolsInner
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Metatrader 5 Rest Api
 *
 * MetaTrader5 Rest Api. Call /init/ to get token, which is required in other methods.
 *
 * OpenAPI spec version: 0.0.2-oas3
 * Contact: mikha.dev@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.41
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ArrayOfSymbolsInner Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArrayOfSymbolsInner implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ArrayOfSymbols_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'path' => 'string',
'currency_base' => 'string',
'description' => 'string',
'spread' => 'float',
'swap_mode' => 'int',
'swap_long' => 'float',
'swap_short' => 'float',
'vol_min' => 'int',
'vol_max' => 'int',
'vol_limit' => 'int',
'vol_step' => 'int',
'tick_value' => 'float',
'tick_size' => 'float',
'contract_size' => 'float',
'calc_mode' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'path' => null,
'currency_base' => null,
'description' => null,
'spread' => null,
'swap_mode' => null,
'swap_long' => null,
'swap_short' => null,
'vol_min' => null,
'vol_max' => null,
'vol_limit' => null,
'vol_step' => null,
'tick_value' => null,
'tick_size' => null,
'contract_size' => null,
'calc_mode' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'path' => 'path',
'currency_base' => 'currency_base',
'description' => 'description',
'spread' => 'spread',
'swap_mode' => 'swap_mode',
'swap_long' => 'swap_long',
'swap_short' => 'swap_short',
'vol_min' => 'vol_min',
'vol_max' => 'vol_max',
'vol_limit' => 'vol_limit',
'vol_step' => 'vol_step',
'tick_value' => 'tick_value',
'tick_size' => 'tick_size',
'contract_size' => 'contract_size',
'calc_mode' => 'calc_mode'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'path' => 'setPath',
'currency_base' => 'setCurrencyBase',
'description' => 'setDescription',
'spread' => 'setSpread',
'swap_mode' => 'setSwapMode',
'swap_long' => 'setSwapLong',
'swap_short' => 'setSwapShort',
'vol_min' => 'setVolMin',
'vol_max' => 'setVolMax',
'vol_limit' => 'setVolLimit',
'vol_step' => 'setVolStep',
'tick_value' => 'setTickValue',
'tick_size' => 'setTickSize',
'contract_size' => 'setContractSize',
'calc_mode' => 'setCalcMode'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'path' => 'getPath',
'currency_base' => 'getCurrencyBase',
'description' => 'getDescription',
'spread' => 'getSpread',
'swap_mode' => 'getSwapMode',
'swap_long' => 'getSwapLong',
'swap_short' => 'getSwapShort',
'vol_min' => 'getVolMin',
'vol_max' => 'getVolMax',
'vol_limit' => 'getVolLimit',
'vol_step' => 'getVolStep',
'tick_value' => 'getTickValue',
'tick_size' => 'getTickSize',
'contract_size' => 'getContractSize',
'calc_mode' => 'getCalcMode'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['currency_base'] = isset($data['currency_base']) ? $data['currency_base'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['spread'] = isset($data['spread']) ? $data['spread'] : null;
        $this->container['swap_mode'] = isset($data['swap_mode']) ? $data['swap_mode'] : null;
        $this->container['swap_long'] = isset($data['swap_long']) ? $data['swap_long'] : null;
        $this->container['swap_short'] = isset($data['swap_short']) ? $data['swap_short'] : null;
        $this->container['vol_min'] = isset($data['vol_min']) ? $data['vol_min'] : null;
        $this->container['vol_max'] = isset($data['vol_max']) ? $data['vol_max'] : null;
        $this->container['vol_limit'] = isset($data['vol_limit']) ? $data['vol_limit'] : null;
        $this->container['vol_step'] = isset($data['vol_step']) ? $data['vol_step'] : null;
        $this->container['tick_value'] = isset($data['tick_value']) ? $data['tick_value'] : null;
        $this->container['tick_size'] = isset($data['tick_size']) ? $data['tick_size'] : null;
        $this->container['contract_size'] = isset($data['contract_size']) ? $data['contract_size'] : null;
        $this->container['calc_mode'] = isset($data['calc_mode']) ? $data['calc_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path path
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets currency_base
     *
     * @return string
     */
    public function getCurrencyBase()
    {
        return $this->container['currency_base'];
    }

    /**
     * Sets currency_base
     *
     * @param string $currency_base currency_base
     *
     * @return $this
     */
    public function setCurrencyBase($currency_base)
    {
        $this->container['currency_base'] = $currency_base;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets spread
     *
     * @return float
     */
    public function getSpread()
    {
        return $this->container['spread'];
    }

    /**
     * Sets spread
     *
     * @param float $spread spread
     *
     * @return $this
     */
    public function setSpread($spread)
    {
        $this->container['spread'] = $spread;

        return $this;
    }

    /**
     * Gets swap_mode
     *
     * @return int
     */
    public function getSwapMode()
    {
        return $this->container['swap_mode'];
    }

    /**
     * Sets swap_mode
     *
     * @param int $swap_mode swap_mode
     *
     * @return $this
     */
    public function setSwapMode($swap_mode)
    {
        $this->container['swap_mode'] = $swap_mode;

        return $this;
    }

    /**
     * Gets swap_long
     *
     * @return float
     */
    public function getSwapLong()
    {
        return $this->container['swap_long'];
    }

    /**
     * Sets swap_long
     *
     * @param float $swap_long swap_long
     *
     * @return $this
     */
    public function setSwapLong($swap_long)
    {
        $this->container['swap_long'] = $swap_long;

        return $this;
    }

    /**
     * Gets swap_short
     *
     * @return float
     */
    public function getSwapShort()
    {
        return $this->container['swap_short'];
    }

    /**
     * Sets swap_short
     *
     * @param float $swap_short swap_short
     *
     * @return $this
     */
    public function setSwapShort($swap_short)
    {
        $this->container['swap_short'] = $swap_short;

        return $this;
    }

    /**
     * Gets vol_min
     *
     * @return int
     */
    public function getVolMin()
    {
        return $this->container['vol_min'];
    }

    /**
     * Sets vol_min
     *
     * @param int $vol_min vol_min
     *
     * @return $this
     */
    public function setVolMin($vol_min)
    {
        $this->container['vol_min'] = $vol_min;

        return $this;
    }

    /**
     * Gets vol_max
     *
     * @return int
     */
    public function getVolMax()
    {
        return $this->container['vol_max'];
    }

    /**
     * Sets vol_max
     *
     * @param int $vol_max vol_max
     *
     * @return $this
     */
    public function setVolMax($vol_max)
    {
        $this->container['vol_max'] = $vol_max;

        return $this;
    }

    /**
     * Gets vol_limit
     *
     * @return int
     */
    public function getVolLimit()
    {
        return $this->container['vol_limit'];
    }

    /**
     * Sets vol_limit
     *
     * @param int $vol_limit vol_limit
     *
     * @return $this
     */
    public function setVolLimit($vol_limit)
    {
        $this->container['vol_limit'] = $vol_limit;

        return $this;
    }

    /**
     * Gets vol_step
     *
     * @return int
     */
    public function getVolStep()
    {
        return $this->container['vol_step'];
    }

    /**
     * Sets vol_step
     *
     * @param int $vol_step vol_step
     *
     * @return $this
     */
    public function setVolStep($vol_step)
    {
        $this->container['vol_step'] = $vol_step;

        return $this;
    }

    /**
     * Gets tick_value
     *
     * @return float
     */
    public function getTickValue()
    {
        return $this->container['tick_value'];
    }

    /**
     * Sets tick_value
     *
     * @param float $tick_value tick_value
     *
     * @return $this
     */
    public function setTickValue($tick_value)
    {
        $this->container['tick_value'] = $tick_value;

        return $this;
    }

    /**
     * Gets tick_size
     *
     * @return float
     */
    public function getTickSize()
    {
        return $this->container['tick_size'];
    }

    /**
     * Sets tick_size
     *
     * @param float $tick_size tick_size
     *
     * @return $this
     */
    public function setTickSize($tick_size)
    {
        $this->container['tick_size'] = $tick_size;

        return $this;
    }

    /**
     * Gets contract_size
     *
     * @return float
     */
    public function getContractSize()
    {
        return $this->container['contract_size'];
    }

    /**
     * Sets contract_size
     *
     * @param float $contract_size contract_size
     *
     * @return $this
     */
    public function setContractSize($contract_size)
    {
        $this->container['contract_size'] = $contract_size;

        return $this;
    }

    /**
     * Gets calc_mode
     *
     * @return int
     */
    public function getCalcMode()
    {
        return $this->container['calc_mode'];
    }

    /**
     * Sets calc_mode
     *
     * @param int $calc_mode calc_mode
     *
     * @return $this
     */
    public function setCalcMode($calc_mode)
    {
        $this->container['calc_mode'] = $calc_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
