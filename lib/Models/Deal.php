<?php
/**
 * Deal
 *
 * PHP version 5
 *
 * @category Class
 * @package  D4T\MT5Sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Metatrader 5 Rest Api
 *
 * MetaTrader5 Rest Api. Call /init/ to get token, which is required in other methods.
 *
 * OpenAPI spec version: 0.0.3-oas3
 * Contact: mikha.dev@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace D4T\MT5Sdk\Models;

use \ArrayAccess;
use \D4T\MT5Sdk\ObjectSerializer;

/**
 * Deal Class Doc Comment
 *
 * @category Class
 * @package  D4T\MT5Sdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Deal implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Deal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ticket' => 'int',
        'entry' => 'int',
        'reason' => 'int',
        'action' => 'int',
        'type' => 'int',
        'type_str' => 'string',
        'symbol' => 'string',
        'lots' => 'float',
        'time' => 'string',
        'price' => 'float',
        'comment' => 'string',
        'sl' => 'float',
        'tp' => 'float',
        'pl' => 'float',
        'commission' => 'float',
        'swap' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ticket' => null,
        'entry' => null,
        'reason' => null,
        'action' => null,
        'type' => null,
        'type_str' => null,
        'symbol' => null,
        'lots' => null,
        'time' => null,
        'price' => null,
        'comment' => null,
        'sl' => null,
        'tp' => null,
        'pl' => null,
        'commission' => null,
        'swap' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ticket' => 'ticket',
        'entry' => 'entry',
        'reason' => 'reason',
        'action' => 'action',
        'type' => 'type',
        'type_str' => 'type_str',
        'symbol' => 'symbol',
        'lots' => 'lots',
        'time' => 'time',
        'price' => 'price',
        'comment' => 'comment',
        'sl' => 'sl',
        'tp' => 'tp',
        'pl' => 'pl',
        'commission' => 'commission',
        'swap' => 'swap'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ticket' => 'setTicket',
        'entry' => 'setEntry',
        'reason' => 'setReason',
        'action' => 'setAction',
        'type' => 'setType',
        'type_str' => 'setTypeStr',
        'symbol' => 'setSymbol',
        'lots' => 'setLots',
        'time' => 'setTime',
        'price' => 'setPrice',
        'comment' => 'setComment',
        'sl' => 'setSl',
        'tp' => 'setTp',
        'pl' => 'setPl',
        'commission' => 'setCommission',
        'swap' => 'setSwap'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ticket' => 'getTicket',
        'entry' => 'getEntry',
        'reason' => 'getReason',
        'action' => 'getAction',
        'type' => 'getType',
        'type_str' => 'getTypeStr',
        'symbol' => 'getSymbol',
        'lots' => 'getLots',
        'time' => 'getTime',
        'price' => 'getPrice',
        'comment' => 'getComment',
        'sl' => 'getSl',
        'tp' => 'getTp',
        'pl' => 'getPl',
        'commission' => 'getCommission',
        'swap' => 'getSwap'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ENTRY_0 = 0;
    const ENTRY_1 = 1;
    const ENTRY_2 = 2;
    const ENTRY_3 = 3;
    const REASON_0 = 0;
    const REASON_1 = 1;
    const REASON_2 = 2;
    const REASON_3 = 3;
    const REASON_4 = 4;
    const REASON_5 = 5;
    const REASON_6 = 6;
    const REASON_7 = 7;
    const REASON_8 = 8;
    const REASON_9 = 9;
    const REASON_10 = 10;
    const REASON_11 = 11;
    const REASON_12 = 12;
    const REASON_13 = 13;
    const REASON_14 = 14;
    const REASON_16 = 16;
    const REASON_17 = 17;
    const ACTION_0 = 0;
    const ACTION_1 = 1;
    const ACTION_2 = 2;
    const ACTION_3 = 3;
    const ACTION_4 = 4;
    const ACTION_5 = 5;
    const ACTION_6 = 6;
    const ACTION_7 = 7;
    const TYPE_0 = 0;
    const TYPE_1 = 1;
    const TYPE_6 = 6;
    const TYPE_7 = 7;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntryAllowableValues()
    {
        return [
            self::ENTRY_0,
            self::ENTRY_1,
            self::ENTRY_2,
            self::ENTRY_3,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonAllowableValues()
    {
        return [
            self::REASON_0,
            self::REASON_1,
            self::REASON_2,
            self::REASON_3,
            self::REASON_4,
            self::REASON_5,
            self::REASON_6,
            self::REASON_7,
            self::REASON_8,
            self::REASON_9,
            self::REASON_10,
            self::REASON_11,
            self::REASON_12,
            self::REASON_13,
            self::REASON_14,
            self::REASON_16,
            self::REASON_17,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_0,
            self::ACTION_1,
            self::ACTION_2,
            self::ACTION_3,
            self::ACTION_4,
            self::ACTION_5,
            self::ACTION_6,
            self::ACTION_7,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_0,
            self::TYPE_1,
            self::TYPE_6,
            self::TYPE_7,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ticket'] = isset($data['ticket']) ? $data['ticket'] : null;
        $this->container['entry'] = isset($data['entry']) ? $data['entry'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['type_str'] = isset($data['type_str']) ? $data['type_str'] : null;
        $this->container['symbol'] = isset($data['symbol']) ? $data['symbol'] : null;
        $this->container['lots'] = isset($data['lots']) ? $data['lots'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['sl'] = isset($data['sl']) ? $data['sl'] : null;
        $this->container['tp'] = isset($data['tp']) ? $data['tp'] : null;
        $this->container['pl'] = isset($data['pl']) ? $data['pl'] : null;
        $this->container['commission'] = isset($data['commission']) ? $data['commission'] : null;
        $this->container['swap'] = isset($data['swap']) ? $data['swap'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEntryAllowableValues();
        if (!is_null($this->container['entry']) && !in_array($this->container['entry'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'entry', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($this->container['reason']) && !in_array($this->container['reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'action', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ticket
     *
     * @return int
     */
    public function getTicket()
    {
        return $this->container['ticket'];
    }

    /**
     * Sets ticket
     *
     * @param int $ticket ticket
     *
     * @return $this
     */
    public function setTicket($ticket)
    {
        $this->container['ticket'] = $ticket;

        return $this;
    }

    /**
     * Gets entry
     *
     * @return int
     */
    public function getEntry()
    {
        return $this->container['entry'];
    }

    /**
     * Sets entry
     *
     * @param int $entry Deal Утекн:  * `0` - in market  * `1` - out of market  * `2` - reverse  * `3` - closed by  hedged position
     *
     * @return $this
     */
    public function setEntry($entry)
    {
        $allowedValues = $this->getEntryAllowableValues();
        if (!is_null($entry) && !in_array($entry, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'entry', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entry'] = $entry;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return int
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param int $reason Deal Reason:  * `0` - deal placed manually  * `1` - deal placed by expert  * `2` - deal placed by dealer  * `3` - deal placed due SL  * `4` - deal placed due TP  * `16` - deal placed manually by mobile terminal  * `17` - deal placed manually by web terminal
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $allowedValues = $this->getReasonAllowableValues();
        if (!is_null($reason) && !in_array($reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets action
     *
     * @return int
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param int $action Deal Action:  * `0` - buy  * `1` - sell  * `2` - deposit operation  * `3` - credit operation  * `4` - additional charges  * `5` - correction deals  * `6` - bonus  * `7` - commission
     *
     * @return $this
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'action', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type Deal Type:  * `0` - buy  * `1` - sell  * `6` - balance  * `7` - commission
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets type_str
     *
     * @return string
     */
    public function getTypeStr()
    {
        return $this->container['type_str'];
    }

    /**
     * Sets type_str
     *
     * @param string $type_str type_str
     *
     * @return $this
     */
    public function setTypeStr($type_str)
    {
        $this->container['type_str'] = $type_str;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol symbol
     *
     * @return $this
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets lots
     *
     * @return float
     */
    public function getLots()
    {
        return $this->container['lots'];
    }

    /**
     * Sets lots
     *
     * @param float $lots lots
     *
     * @return $this
     */
    public function setLots($lots)
    {
        $this->container['lots'] = $lots;

        return $this;
    }

    /**
     * Gets time
     *
     * @return string
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param string $time time
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets sl
     *
     * @return float
     */
    public function getSl()
    {
        return $this->container['sl'];
    }

    /**
     * Sets sl
     *
     * @param float $sl sl
     *
     * @return $this
     */
    public function setSl($sl)
    {
        $this->container['sl'] = $sl;

        return $this;
    }

    /**
     * Gets tp
     *
     * @return float
     */
    public function getTp()
    {
        return $this->container['tp'];
    }

    /**
     * Sets tp
     *
     * @param float $tp tp
     *
     * @return $this
     */
    public function setTp($tp)
    {
        $this->container['tp'] = $tp;

        return $this;
    }

    /**
     * Gets pl
     *
     * @return float
     */
    public function getPl()
    {
        return $this->container['pl'];
    }

    /**
     * Sets pl
     *
     * @param float $pl pl
     *
     * @return $this
     */
    public function setPl($pl)
    {
        $this->container['pl'] = $pl;

        return $this;
    }

    /**
     * Gets commission
     *
     * @return float
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     *
     * @param float $commission commission
     *
     * @return $this
     */
    public function setCommission($commission)
    {
        $this->container['commission'] = $commission;

        return $this;
    }

    /**
     * Gets swap
     *
     * @return float
     */
    public function getSwap()
    {
        return $this->container['swap'];
    }

    /**
     * Sets swap
     *
     * @param float $swap swap
     *
     * @return $this
     */
    public function setSwap($swap)
    {
        $this->container['swap'] = $swap;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
